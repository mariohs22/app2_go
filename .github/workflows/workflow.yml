name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  SERVICE: ${{ secrets.GCP_SERVICE_NAME }}
  REGION: ${{ secrets.GCP_LOCATION }}
  TF_VAR_project: ${{ secrets.GCP_PROJECT }}
  TF_VAR_location: ${{ secrets.GCP_LOCATION }}
  TF_VAR_gcr_region: ${{ secrets.GCP_REGION }}
  TF_VAR_service_name: ${{ secrets.GCP_SERVICE_NAME }}
  TF_VAR_image_name: ${{ secrets.GCP_IMAGE_NAME }}

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true

      - name: Authorize Docker push
        run: gcloud auth configure-docker

      - name: Build and Push Container
        run: |-
          docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{  github.sha }} .
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{  github.sha }}

      - name: Import service
        run: terraform init && terraform import google_cloud_run_service.service ${{ secrets.GCP_LOCATION }}/${{ secrets.GCP_SERVICE_NAME }}
        working-directory: ./infrastructure

      - name: terraform
        run: make up
        working-directory: ./infrastructure
        env:
          TF_VAR_project: ${{ secrets.GCP_PROJECT }}
          TF_VAR_location: ${{ secrets.GCP_LOCATION }}
          TF_VAR_gcr_region: ${{ secrets.GCP_REGION }}
          TF_VAR_service_name: ${{ secrets.GCP_SERVICE_NAME }}
          TF_VAR_image_name: ${{ secrets.GCP_IMAGE_NAME }}

  # lint:
  #   name: lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Run Go lint
  #       uses: golangci/golangci-lint-action@v2
  #       with:
  #         version: latest

  # sec:
  #   name: gosec
  #   needs: lint
  #   runs-on: ubuntu-latest
  #   env:
  #     GO111MODULE: on
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Run Gosec Security scanner
  #       uses: securego/gosec@master
  #       with:
  #         args: ./...

  #   test:
  #     needs: sec
  #     strategy:
  #       matrix:
  #         go-version: [1.16.x]
  #         os: [ubuntu-latest, macos-latest, windows-latest]
  #     runs-on: ${{ matrix.os }}
  #     steps:
  #       - name: Install Go
  #         uses: actions/setup-go@v2
  #         with:
  #           go-version: ${{ matrix.go-version }}
  #       - name: Checkout code
  #         uses: actions/checkout@v2
  #       - name: Test
  #         run: go test -v ./...

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: sec
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Setup Cloud SDK
  #       uses: google-github-actions/setup-gcloud@v0.2.0
  #       with:
  #         project_id: ${{ env.PROJECT_ID }}
  #         service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }}
  #         export_default_credentials: true # Set to true to authenticate the Cloud Run action

  #     - name: Authorize Docker push
  #       run: gcloud auth configure-docker

  #     - name: Build and Push Container
  #       run: |-
  #         docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{  github.sha }} .
  #         docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{  github.sha }}

  #     - name: Deploy to Cloud Run
  #       id: deploy
  #       uses: google-github-actions/deploy-cloudrun@v0.4.0
  #       with:
  #         service: ${{ env.SERVICE }}
  #         image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{  github.sha }}
  #         region: ${{ env.REGION }}

  #     - name: Show Output
  #       run: echo ${{ steps.deploy.outputs.url }}
