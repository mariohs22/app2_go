name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PROJECT_ID: app-go-321216
  SERVICE: hello-cloud-run
  REGION: us-central1

jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Set up Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: 1.16

  #     - name: Build
  #       run: go build -v ./...

  # lint:
  #   name: lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Run Go lint
  #       uses: golangci/golangci-lint-action@v2
  #       with:
  #         version: latest

  # sec:
  #   name: gosec
  #   needs: lint
  #   runs-on: ubuntu-latest
  #   env:
  #     GO111MODULE: on
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Run Gosec Security scanner
  #       uses: securego/gosec@master
  #       with:
  #         args: ./...

  # test:
  #   needs: sec
  #   strategy:
  #     matrix:
  #       go-version: [1.16.x]
  #       os: [ubuntu-latest, macos-latest, windows-latest]
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - name: Install Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: ${{ matrix.go-version }}
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #     - name: Test
  #       run: go test -v ./...

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true # Set to true to authenticate the Cloud Run action

      - name: Authorize Docker push
        run: gcloud auth configure-docker

      - name: Build and Push Container
        run: |-
          docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{  github.sha }} .
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{  github.sha }}

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0.4.0
        with:
          service: ${{ env.SERVICE }}
          image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{  github.sha }}
          region: ${{ env.REGION }}

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}

  # deploy:
  #   name: Deploy to Amazon
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-west-1

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1

  #     - name: Check if repository exists
  #       run: aws ecr describe-repositories --repository-names reponame || aws ecr create-repository --repository-name reponame

  #     - name: Build, tag, and push image to Amazon ECR
  #       id: build-image
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         ECR_REPOSITORY: reponame
  #         IMAGE_TAG: ${{ github.sha }}
  #       run: |
  #         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #         echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  #     - name: Download task definition
  #       run: |
  #         aws ecs describe-task-definition --task-definition my-task-definition-family --query taskDefinition > task-definition.json

  #     - name: Render Amazon ECS task definition
  #       id: render-web-container
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: task-definition.json
  #         container-name: web
  #         image: ${{ steps.build-image.outputs.image }}

  #     - name: Deploy to Amazon ECS service
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #       with:
  #         task-definition: ${{ steps.render-web-container.outputs.task-definition }}
  #         service: my-service
  #         cluster: my-cluster
  #         wait-for-service-stability: true

  #     - name: Log out of Amazon ECR
  #       if: always()
  #       run: docker logout ${{ steps.login-ecr.outputs.registry }}
